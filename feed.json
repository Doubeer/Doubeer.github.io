{
    "version": "https://jsonfeed.org/version/1",
    "title": null,
    "subtitle": "",
    "icon": "http://example.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/08/14/%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "http://example.com/2023/08/14/%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "重复的子字符串",
            "date_published": "2023-08-13T16:48:38.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZXBlYXRlZC1zdWJzdHJpbmctcGF0dGVybi8=\">459. 重复的子字符串 - 力扣（LeetCode）</span></p>\n<p>给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过 10000。</p>\n<p>示例 1:</p>\n<ul>\n<li>输入: &quot;abab&quot;</li>\n<li>输出: True</li>\n<li>解释：可由子字符串 &quot;ab&quot; 重复两次构成。</li>\n</ul>\n<p>示例 2:</p>\n<ul>\n<li>输入: &quot;aba&quot;</li>\n<li>输出: False</li>\n</ul>\n<p>示例 3:</p>\n<ul>\n<li>输入: &quot;abcabcabcabc&quot;</li>\n<li>输出: True</li>\n<li>解释：可由子字符串 &quot;abc&quot; 重复四次构成。 (或者子字符串 &quot;abcabc&quot; 重复两次构成。)</li>\n</ul>\n<h2 id><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<h2 id=\"移动匹配\"><a class=\"anchor\" href=\"#移动匹配\">#</a> 移动匹配</h2>\n<p>如果为 ture，则说明字符串里必定有最小组成单元</p>\n<p>那么如果把两个字符串组合成新的字符串，然后掐头去尾，如果新字符串里包含原字符串，则说明里面有最小组成串</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度: O (n)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 空间复杂度: O (1)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>class Solution <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    bool <span class=\"token function\">repeatedSubstringPattern</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        string t <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 掐头去尾</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span> <span class=\"token comment\">//std::string::npos 是 find 方法的返回值，说明没有找到</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"kmp\"><a class=\"anchor\" href=\"#kmp\">#</a> kmp</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcm9ncmFtbWVyY2FybC5jb20vMDQ1OS4lRTklODclOEQlRTUlQTQlOEQlRTclOUElODQlRTUlQUQlOTAlRTUlQUQlOTclRTclQUMlQTYlRTQlQjglQjIuaHRtbCMlRTYlODAlOUQlRTglQjclQUY=\">代码随想录 (programmercarl.com)</span></p>\n",
            "tags": [
                "算法",
                "字符串",
                "字符串",
                "KMP"
            ]
        },
        {
            "id": "http://example.com/2023/08/13/KMP/",
            "url": "http://example.com/2023/08/13/KMP/",
            "title": "KMP",
            "date_published": "2023-08-13T15:50:53.000Z",
            "content_html": "<h1 id=\"kmp讲解\"><a class=\"anchor\" href=\"#kmp讲解\">#</a> kmp 讲解</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcm9ncmFtbWVyY2FybC5jb20vMDAyOC4lRTUlQUUlOUUlRTclOEUlQjBzdHJTdHIuaHRtbCMlRTYlODAlOUQlRTglQjclQUY=\">代码随想录 (programmercarl.com)</span></p>\n<p>当我们需要在一个字符串中查找另一个字符串的出现位置时，常常会使用 KMP 算法，因为它在时间复杂度上具有优势。接下来，我将详细讲解 KMP 算法的原理和步骤。</p>\n<p>假设我们需要在文本串 S 中查找模式串 P 的出现位置。</p>\n<ol>\n<li>\n<p>预处理模式串 P：</p>\n<ul>\n<li>\n<p>首先，我们需要构建一个部分匹配表（Partial Match Table），它记录了模式串 P 中每个位置的最长相等前缀和最长相等后缀的长度。</p>\n</li>\n<li>\n<p>部分匹配表的构建是通过递归的方式完成的，从模式串的第二个字符开始，依次比较前缀和后缀的字符。如果相等，部分匹配值加一；如果不相等，则需要根据已经计算出的部分匹配值来决定模式串的偏移量。</p>\n</li>\n<li>\n<p>举个例子，假设模式串 P 为 &quot;ABCDABD&quot;，那么部分匹配表如下：</p>\n<pre><code>部分匹配表： [0, 0, 0, 0, 1, 2, 0]\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>执行匹配操作：</p>\n<ul>\n<li>在文本串 S 中，维护两个指针 i 和 j，分别指向当前正在比较的字符位置。</li>\n<li>从文本串 S 的第一个字符开始，逐个与模式串 P 的字符进行比较。如果相等，则 i 和 j 分别往后移动一位；如果不相等，则根据已经计算得到的部分匹配表，决定模式串 P 的偏移量。</li>\n<li>偏移量的计算方法为：将 j 移动到部分匹配表对应位置的值，即 j = 部分匹配表 [j]。</li>\n<li>如果模式串 P 的 j 指针移动到了开头（即 j=0），说明当前字符与文本串 S 的字符不匹配，此时 i 和 j 分别向后移动一位。</li>\n<li>重复以上步骤，直到找到模式串 P 在文本串 S 中的出现位置，或者遍历完整个文本串 S。</li>\n<li>如果匹配成功，模式串 P 在文本串 S 中的出现位置为 i-j。</li>\n</ul>\n</li>\n</ol>\n<p>KMP 算法通过利用部分匹配表，可以在比较过程中跳过一些不必要的字符比较，提高了匹配的效率。这是因为部分匹配表保存了模式串 P 的前缀和后缀的最长相等长度，使得我们可以根据已经匹配到的字符信息，移动模式串 P 的位置，避免无效的比较操作。</p>\n<p>构建 next 数组（也称为部分匹配表）是 KMP 算法的一部分，它用于预处理模式串 P。以下是一种常见的构建 next 数组的方法：</p>\n<ol>\n<li>初始化 next 数组：创建一个长度为模式串 P 长度的数组，初始值都为 0。</li>\n<li>遍历模式串 P，从第二个字符开始（即下标为 1），依次计算每个位置的最长相等前缀后缀长度。</li>\n<li>对于第 i 个位置，首先令 j 等于前一个位置的 next 值，即 j = next [i-1]。</li>\n<li>在一个循环中，比较模式串 P 的第 i 个字符和第 j 个字符：\n<ul>\n<li>如果 P [i] == P [j]，说明存在一个更长的相等前缀后缀，因此对应的 next [i] = j + 1，并将 i 和 j 分别向后移动一位（i++，j++）。</li>\n<li>如果 P [i] != P [j]，说明当前字符不匹配，需要回溯。这时，j 指针需要根据已经计算得到的 next 数组来进行偏移，即 j = next [j]。</li>\n<li>如果 j 已经回溯到开头（即 j=0），说明没有找到相等前缀后缀，此时对应的 next [i] 为 0，并将 i 向后移动一位（i++）。</li>\n</ul>\n</li>\n<li>重复步骤 4，直到遍历完整个模式串 P，得到最终的 next 数组。</li>\n</ol>\n<p>下面举个例子来说明，假设模式串 P 为 &quot;ABCDABD&quot;：</p>\n<ol>\n<li>初始化 next 数组为 [0, 0, 0, 0, 0, 0, 0]。</li>\n<li>从第二个字符开始，依次计算每个位置的最长相等前缀后缀长度。\n<ul>\n<li>对于第二个位置，比较 P [1] 和 P [0]，不相等，所以 next [1] = 0。</li>\n<li>对于第三个位置，比较 P [2] 和 P [0]，不相等，所以 next [2] = 0。</li>\n<li>对于第四个位置，比较 P [3] 和 P [0]，不相等，所以 next [3] = 0。</li>\n<li>对于第五个位置，比较 P [4] 和 P [0]，相等，所以 next [4] = 0+1 = 1，即最长相等前缀后缀长度为 1。</li>\n<li>对于第六个位置，比较 P [5] 和 P [1]，相等，所以 next [5] = 2。</li>\n<li>对于第七个位置，比较 P [6] 和 P [2]，不相等，比较 P [6] 和 P [1]，不相等，比较 P [6] 和 P [0]，所以 next [6] = 0。</li>\n</ul>\n</li>\n<li>遍历完模式串 P，得到最终的 next 数组为 [0, 0, 0, 0, 1, 2, 0]。这个数组保存了模式串中每个位置的最长相等前缀后缀长度。</li>\n</ol>\n<p>通过以上步骤，我们成功地构建了 next 数组。在 KMP 算法的匹配过程中，利用这个数组可以根据已经匹配到的字符信息，移动模式串的位置，避免不必要的比较操作，提高匹配效率。</p>\n<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p>给你两个字符串  <code>haystack</code>  和  <code>needle</code>  ，请你在  <code>haystack</code>  字符串中找出  <code>needle</code>  字符串的第一个匹配项的下标（下标从 0 开始）。如果  <code>needle</code>  不是  <code>haystack</code>  的一部分，则返回  <code>-1</code>  。</p>\n<p>示例 1: 输入: haystack = &quot;hello&quot;, needle = &quot;ll&quot; 输出: 2</p>\n<p>示例 2: 输入: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot; 输出: -1</p>\n<p>说明：当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。 对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与 C 语言的 strstr () 以及 Java 的 indexOf () 定义相符。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9maW5kLXRoZS1pbmRleC1vZi10aGUtZmlyc3Qtb2NjdXJyZW5jZS1pbi1hLXN0cmluZy8=\">28. 找出字符串中第一个匹配项的下标 - 力扣（LeetCode）</span></p>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度: O (n + m)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 空间复杂度: O (m), 只需要保存字符串 needle 的前缀表</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>class Solution <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 注意 i 从 1 开始</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 前后缀不相同了</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 向前回退</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 找到相同的前后缀</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 j（前缀的长度）赋给 next [i]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">strStr</span><span class=\"token punctuation\">(</span>string haystack<span class=\"token punctuation\">,</span> string needle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//// 因为 next 数组里记录的起始位置为 - 1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 注意 i 就从 0 开始</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> haystack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> needle<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 不匹配</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//j 寻找之前匹配的位置</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> needle<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 匹配，j 和 i 同时向后移动</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//i 的增加在 for 循环里</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 文本串 s 里出现了模式串 t</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "字符串",
                "字符串",
                "KMP"
            ]
        },
        {
            "id": "http://example.com/2023/08/13/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D/",
            "url": "http://example.com/2023/08/13/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D/",
            "title": "反转字符串中的单词",
            "date_published": "2023-08-13T14:33:14.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p>给定一个字符串，逐个翻转字符串中的每个单词。</p>\n<p>示例 1：<br>\n输入: &quot;the sky is blue&quot;<br>\n输出:&quot;blue is sky the&quot;</p>\n<p>示例 2：<br>\n输入: &quot;hello world!&quot;<br>\n输出:&quot;world! hello&quot;<br>\n 解释：输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</p>\n<p>示例 3：<br>\n输入: &quot;a good  example&quot;<br>\n输出:&quot;example good a&quot;<br>\n 解释：如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZXZlcnNlLXdvcmRzLWluLWEtc3RyaW5nLw==\">151. 反转字符串中的单词 - 力扣（LeetCode）</span></p>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<p>可以用反转字符串的思路，我们可以先移除多余空格然后全部反转，再以字符中的空格为分界反转单词</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度: O (n)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 空间复杂度: O (1) 或 O (n)，取决于语言中字符串是否可变</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>class Solution <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 翻转，区间写法：左闭右闭 []</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">removeExtraSpaces</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 去除所有空格并在相邻单词之间添加空格，快慢指针。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> slow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 整体思想参考</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 遇到非空格就处理，即删除所有空格。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>slow <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">[</span>slow<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 手动控制空格，给单词之间添加空格。slow != 0 说明不是第一个单词，需要在单词前添加空格。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 补上该单词，遇到空格说明单词结束。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    s<span class=\"token punctuation\">[</span>slow<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>slow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//slow 的大小即为去除多余空格后的大小。</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    string <span class=\"token function\">reverseWords</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">removeExtraSpaces</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 去除多余空格，保证单词之间之只有一个空格，且字符串首尾没空格。</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//removeExtraSpaces 后保证第一个单词的开始下标一定是 0。</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 到达空格或者串尾，说明一个单词结束。进行翻转。</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 翻转，注意是左闭右闭 [] 的翻转。</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                start <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新下一个单词的开始下标 start</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "字符串",
                "双指针",
                "字符串"
            ]
        },
        {
            "id": "http://example.com/2023/08/13/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/",
            "url": "http://example.com/2023/08/13/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/",
            "title": "替换空格",
            "date_published": "2023-08-13T14:22:39.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p>请实现一个函数，把字符串 s 中的每个空格替换成 &quot;%20&quot;。</p>\n<p>示例 1： 输入：s = &quot;We are happy.&quot;<br>\n输出：&quot;We%20are%20happy.&quot;</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy90aS1odWFuLWtvbmctZ2UtbGNvZi8=\">剑指 Offer 05. 替换空格 - 力扣（LeetCode）</span></p>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<p>空格换成‘%20’，一个字符变成 3 个，</p>\n<p>如果不重新定义字符串的话我们需要先给目标字符串扩容。</p>\n<p>扩容完以后，如果从前往后替换，那么当前面的变动后面紧随着都要变动，所以我们可以从后往前变动，用两个指针，一个指向原本的末尾，另一个指向扩容后的末尾，同步向前替换。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>class Solution <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    string <span class=\"token function\">replaceSpace</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 统计空格的个数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> sOldSize <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 扩充字符串 s 的大小，也就是每个空格替换成 \"%20\" 之后的大小</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> sNewSize <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 从后先前将空格替换为 \"%20\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> sNewSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> sOldSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'2'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                i <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "字符串",
                "双指针",
                "字符串"
            ]
        },
        {
            "id": "http://example.com/2023/08/13/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2II/",
            "url": "http://example.com/2023/08/13/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2II/",
            "title": "反转字符串II",
            "date_published": "2023-08-13T14:14:13.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p>给定一个字符串 s 和一个整数 k，从字符串开头算起，每计数至 2k 个字符，就反转这 2k 个字符中的前 k 个字符。</p>\n<p>如果剩余字符少于 k 个，则将剩余字符全部反转。</p>\n<p>如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。</p>\n<p>示例:</p>\n<p>输入: s = &quot;abcdefg&quot;, k = 2<br>\n 输出: &quot;bacdfeg&quot;</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZXZlcnNlLXN0cmluZy1paS8=\">541. 反转字符串 II - 力扣（LeetCode）</span></p>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<p>难点在于怎么计数 2k 字符，其实只需要把 for 循环中的自增设置成 2k 即可，反转部分可以用库函数 reverse 或者和上一题一样处理</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>class Solution <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    string <span class=\"token function\">reverseStr</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 1. 每隔 2k 个字符的前 k 个字符进行反转</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 2. 剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> k <span class=\"token operator\">&lt;=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 3. 剩余字符少于 k 个，则将剩余字符全部反转。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "字符串",
                "字符串"
            ]
        },
        {
            "id": "http://example.com/2023/08/13/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "http://example.com/2023/08/13/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "反转字符串",
            "date_published": "2023-08-13T14:07:57.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组  <code>s</code>  的形式给出。</p>\n<p>不要给另外的数组分配额外的空间，你必须 **<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEUlOUYlRTUlOUMlQjAlRTclQUUlOTclRTYlQjMlOTU=\"> 原地</span>修改输入数组 **、使用 O (1) 的额外空间解决这一问题。</p>\n<p>示例 1：<br>\n输入：[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]<br>\n 输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZXZlcnNlLXN0cmluZy8=\">344. 反转字符串 - 力扣（LeetCode）</span></p>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<p>虽然可以直接用库函数解决，但解决方法还是要知道。</p>\n<p>之前写过反转链表，用双指针，这道题同理，只不过更简单</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>class Solution <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reverseString</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "字符串",
                "字符串"
            ]
        },
        {
            "id": "http://example.com/2023/08/13/%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/",
            "url": "http://example.com/2023/08/13/%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/",
            "title": "有效的字母异位词",
            "date_published": "2023-08-12T16:37:31.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p>给定两个字符串  <code>*s*</code>  和  <code>*t*</code>  ，编写一个函数来判断  <code>*t*</code>  是否是  <code>*s*</code>  的字母异位词。</p>\n<p>** 注意：** 若  <code>*s*</code>  和  <code>*t*</code>  中每个字符出现的次数都相同，则称  <code>*s*</code>  和  <code>*t*</code>  互为字母异位词。</p>\n<p><strong>说明:</strong> 你可以假设字符串只包含小写字母。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;\n输出: true\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy92YWxpZC1hbmFncmFtLw==\">242. 有效的字母异位词 - 力扣（LeetCode）</span></p>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<p>定义一个大小为 26 的数组 record 来记录每个字符出现的次数</p>\n<p>先遍历一个字符串，出现的字符 ++，然后遍历另一个字符串，对应的字符 --，</p>\n<p>最后遍历数组，有值不为零则不是字母异位词。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>class Solution <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    bool <span class=\"token function\">isAnagram</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> string t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> record<span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 并不需要记住字符 a 的 ASCII，只要求出一个相对数值就可以了</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            record<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            record<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">//record 数组如果有的元素不为零 0，说明字符串 s 和 t 一定是谁多了字符或者谁少了字符。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//record 数组所有元素都为零 0，说明字符串 s 和 t 是字母异位词</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "哈希表",
                "哈希表"
            ]
        },
        {
            "id": "http://example.com/2023/08/12/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/",
            "url": "http://example.com/2023/08/12/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/",
            "title": "环形链表",
            "date_published": "2023-08-12T09:48:15.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p>给定一个链表的头节点   <code>head</code>  ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回  <code>null</code> 。</em></p>\n<p>如果链表中有某个节点，可以通过连续跟踪  <code>next</code>  指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数  <code>pos</code>  来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果  <code>pos</code>  是  <code>-1</code> ，则在该链表中没有环。<strong>注意： <code>pos</code>  不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p>\n<p><strong>不允许修改</strong> 链表。</p>\n<p><img data-src=\"./1.png\" alt=\"1\"></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9saW5rZWQtbGlzdC1jeWNsZS1paS8=\">142. 环形链表 II - 力扣（LeetCode）</span></p>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<p>第一个问题是有没有环？</p>\n<p>这个可以用两个指针，fast 和 slow，fast 每次走两个节点，slow 走一个节点如果两者在途中相遇则证明有环。</p>\n<p>第二个问题如何找到入环节点？<br>\n一个数学追击问题，如图</p>\n<p><img data-src=\"./2.png\" alt=\"1\"></p>\n<p>slow 走过的是 x+y，fast 走过的是 x+y+n（y+z）联立得 x = (n - 1) (y + z) + z</p>\n<p>当 n=1 时，x=z，即头节点到环入口等于相遇点到换入口</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>class Solution <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ListNode <span class=\"token operator\">*</span><span class=\"token function\">detectCycle</span><span class=\"token punctuation\">(</span>ListNode <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> fast<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 快慢指针相遇，此时从 head 和 相遇点，同时查找直至相遇</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>slow <span class=\"token operator\">==</span> fast<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                ListNode<span class=\"token operator\">*</span> index1 <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                ListNode<span class=\"token operator\">*</span> index2 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index1 <span class=\"token operator\">!=</span> index2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    index1 <span class=\"token operator\">=</span> index1<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    index2 <span class=\"token operator\">=</span> index2<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">return</span> index2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回环的入口</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "链表",
                "双指针",
                "链表"
            ]
        },
        {
            "id": "http://example.com/2023/08/12/%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4/",
            "url": "http://example.com/2023/08/12/%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4/",
            "title": "链表相交",
            "date_published": "2023-08-12T09:29:46.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p>给你两个单链表的头节点  <code>headA</code>  和  <code>headB</code>  ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回  <code>null</code>  。题目数据 保证 整个链式结构中不存在环。</p>\n<p><img data-src=\"./1.png\" alt></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9pbnRlcnNlY3Rpb24tb2YtdHdvLWxpbmtlZC1saXN0cy1sY2NpLw==\">面试题 02.07. 链表相交 - 力扣（LeetCode）</span></p>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<p>链表相交，则交点后链表相同，找到这个交点的指针即可。</p>\n<p>首先让 curA 和 curB 分别指向 headA 和 headB，确认两链表长度，求差值使 curA 和 curB 位于离尾端距离相同的位置。</p>\n<p>此时比较 curA 和 curB 是否相同，相同返回，不同都后移。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度：O (n + m)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 空间复杂度：O (1)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>class Solution <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ListNode <span class=\"token operator\">*</span><span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span>ListNode <span class=\"token operator\">*</span>headA<span class=\"token punctuation\">,</span> ListNode <span class=\"token operator\">*</span>headB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> curA <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> curB <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> lenA <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lenB <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curA <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 求链表 A 的长度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            lenA<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            curA <span class=\"token operator\">=</span> curA<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curB <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 求链表 B 的长度</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            lenB<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            curB <span class=\"token operator\">=</span> curB<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        curA <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        curB <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 让 curA 为最长链表的头，lenA 为其长度</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lenB <span class=\"token operator\">></span> lenA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">swap</span> <span class=\"token punctuation\">(</span>lenA<span class=\"token punctuation\">,</span> lenB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">swap</span> <span class=\"token punctuation\">(</span>curA<span class=\"token punctuation\">,</span> curB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 求长度差</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> lenA <span class=\"token operator\">-</span> lenB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 让 curA 和 curB 在同一起点上（末尾位置对齐）</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>gap<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            curA <span class=\"token operator\">=</span> curA<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 遍历 curA 和 curB，遇到相同则直接返回</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curA <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curA <span class=\"token operator\">==</span> curB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">return</span> curA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            curA <span class=\"token operator\">=</span> curA<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            curB <span class=\"token operator\">=</span> curB<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "链表",
                "链表"
            ]
        },
        {
            "id": "http://example.com/2023/08/12/%E5%88%A0%E9%99%A4%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/",
            "url": "http://example.com/2023/08/12/%E5%88%A0%E9%99%A4%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E8%8A%82%E7%82%B9/",
            "title": "删除倒数第n个节点",
            "date_published": "2023-08-12T09:20:00.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p>给你一个链表，删除链表的倒数第  <code>n</code>  个结点，并且返回链表的头结点。</p>\n<p>** 进阶：** 你能尝试使用一趟扫描实现吗？</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZW1vdmUtbnRoLW5vZGUtZnJvbS1lbmQtb2YtbGlzdC8=\">19. 删除链表的倒数第 N 个结点 - 力扣（LeetCode）</span></p>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<p>一眼顶针，双指针，fast 先走 n 然后和 slow 一起走</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度: O (n)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 空间复杂度: O (1)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>class Solution <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">removeNthFromEnd</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> dummyHead <span class=\"token operator\">=</span> new <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        dummyHead<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> slow <span class=\"token operator\">=</span> dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> fast <span class=\"token operator\">=</span> dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span> <span class=\"token operator\">&amp;&amp;</span> fast <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//fast 再提前走一步，因为需要让 slow 指向删除节点的上一个节点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        slow<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// ListNode *tmp = slow->next;  C++ 释放内存的逻辑</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// slow->next = tmp->next;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// delete nth;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> dummyHead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "链表",
                "双指针",
                "链表"
            ]
        },
        {
            "id": "http://example.com/2023/08/12/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E8%8A%82%E7%82%B9/",
            "url": "http://example.com/2023/08/12/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E8%8A%82%E7%82%B9/",
            "title": "两两交换链表节点",
            "date_published": "2023-08-12T09:01:02.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9zd2FwLW5vZGVzLWluLXBhaXJzLw==\">24. 两两交换链表中的节点 - 力扣（LeetCode）</span></p>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<p>用虚拟头节点方便处理</p>\n<p>cur--》1-》2-》3</p>\n<p>cur--》2</p>\n<p>2--》1</p>\n<p>1--》3</p>\n<p>cur.next.next</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>class Solution <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">swapPairs</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> dummyHead <span class=\"token operator\">=</span> new <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置一个虚拟头结点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        dummyHead<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将虚拟头结点指向 head，这样方面后面做删除操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> nullptr <span class=\"token operator\">&amp;&amp;</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            ListNode<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录临时节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            ListNode<span class=\"token operator\">*</span> tmp1 <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录临时节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 步骤一</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 步骤二</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> tmp1<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 步骤三</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">//cur 移动两位，准备下一轮交换</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> dummyHead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "链表",
                "链表"
            ]
        },
        {
            "id": "http://example.com/2023/08/12/%E7%AC%AC%E5%85%AB%E8%AF%BE-%E5%B0%8F%E6%9D%8E%E7%94%A8%E6%97%A5%E8%AF%AD%E5%86%99%E4%BF%A1/",
            "url": "http://example.com/2023/08/12/%E7%AC%AC%E5%85%AB%E8%AF%BE-%E5%B0%8F%E6%9D%8E%E7%94%A8%E6%97%A5%E8%AF%AD%E5%86%99%E4%BF%A1/",
            "title": "第八课 小李用日语写信",
            "date_published": "2023-08-12T07:09:54.000Z",
            "content_html": "<h1 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h1>\n<h2 id=\"名工具で-动\"><a class=\"anchor\" href=\"#名工具で-动\">#</a> 名【工具】で 动</h2>\n<p>助词 “で” 除了表示用交通用具还可以表示其他手段以及原材料</p>\n<p>李さんは　日本語　<strong>で</strong>　手紙\t書きます。（小李用日语写信。）</p>\n<h2 id=\"名1人は名2人に名3物を-あげます\"><a class=\"anchor\" href=\"#名1人は名2人に名3物を-あげます\">#</a> 名 1【人】は名 2【人】に名 3【物】を　あげます</h2>\n<p>“あげます” 相当于汉语的 “给”</p>\n<p>接受者用助词 “に” 表示</p>\n<p>わたし<strong>は</strong>　小野さん<strong>に</strong>　お土産　<strong>を</strong>　<strong>おげます</strong>。（我送给小野女生礼物）</p>\n<p>注：物品以第一人称、第二人称、第三人称或第三人称、第三人称顺序移动，另，当第三人称是说话人亲戚时按第一人称处理。</p>\n<p>简单来说，我给他人，他人给他人，我给亲戚可以。他人给我，他人给亲戚不可以</p>\n<h2 id=\"名1人は名2人に名3物を-もらいます\"><a class=\"anchor\" href=\"#名1人は名2人に名3物を-もらいます\">#</a> 名 1【人】は名 2【人】に名 3【物】を　もらいます</h2>\n<p>もらいます和あげます 相反，表示 “得到”</p>\n<p>わたし<strong>は</strong>　小野さん<strong>に</strong>　辞書<strong>を</strong>　<strong>もらいました</strong>。（我从小野女生那儿得到一本词典）</p>\n<p>注：物品以第三人称、第二人称、第一人称或第三人称、第三人称顺序移动，另，当第三人称是说话人亲戚时按第一人称处理。和上面一样。</p>\n<h2 id=\"名人に-会います\"><a class=\"anchor\" href=\"#名人に-会います\">#</a> 名【人】に　会います</h2>\n<p>见到的对象用助词 “に”</p>\n<p>李さんは　明日　長島さん　<strong>に</strong>　会います。****(小李明天间长岛先生。)</p>\n<h2 id=\"よ提醒\"><a class=\"anchor\" href=\"#よ提醒\">#</a> よ【提醒】</h2>\n<p>助词 “よ” 用于提醒，读升调</p>\n<p>すみません、李さんは　いますか。（请问，小李在吗？）</p>\n<p>―　もう　帰りました<strong>よ</strong>。（已经回去了。）告知</p>\n<h2 id=\"もう\"><a class=\"anchor\" href=\"#もう\">#</a> もう</h2>\n<p>表示完了，相当于汉语 “已经‘</p>\n<p>昼ご飯を　食べす下か。(你吃过午饭了吗？)</p>\n<p>―　ええ、<strong>もう</strong>　食べました。（是的，我已经吃过了。）</p>\n<h1 id=\"表达及词语讲解\"><a class=\"anchor\" href=\"#表达及词语讲解\">#</a> 表达及词语讲解</h1>\n<h2 id=\"~から-もらいます\"><a class=\"anchor\" href=\"#~から-もらいます\">#</a> ～から　もらいます</h2>\n<p>第三条 “得到” 中的 “に” 可以换成 “から”，但给东西的一方是 “会社”“学校” 等组织团体时，必须用 “から”</p>\n<h2 id=\"あげます\"><a class=\"anchor\" href=\"#あげます\">#</a> あげます</h2>\n<p>给别人东西直接用 “あげます” 有点强势，用 “どうぞ”“どうですか”（怎么样？）比较合适</p>\n",
            "tags": [
                "外语",
                "日语",
                "新标日初上",
                "日语"
            ]
        },
        {
            "id": "http://example.com/2023/08/12/%E7%AC%AC%E4%B8%83%E8%AF%BE-%E5%B0%8F%E6%9D%8E%E6%AF%8F%E5%A4%A9%E9%83%BD%E5%96%9D%E5%92%96%E5%95%A1/",
            "url": "http://example.com/2023/08/12/%E7%AC%AC%E4%B8%83%E8%AF%BE-%E5%B0%8F%E6%9D%8E%E6%AF%8F%E5%A4%A9%E9%83%BD%E5%96%9D%E5%92%96%E5%95%A1/",
            "title": "第七课 小李每天都喝咖啡",
            "date_published": "2023-08-12T05:47:54.000Z",
            "content_html": "<h1 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h1>\n<h2 id=\"名を-动\"><a class=\"anchor\" href=\"#名を-动\">#</a> 名を 动</h2>\n<p>动作的对象用助词 “を” 表示 这里读作 “お”</p>\n<p>李さんは　毎日　コーヒー　を　　飲みます。（小李每天喝咖啡。）</p>\n<h2 id=\"名词场所で-动词\"><a class=\"anchor\" href=\"#名词场所で-动词\">#</a> 名词【场所】で 动词</h2>\n<p>在某地做某事</p>\n<p>日语里存在场所用 “に”，动作进行的场所用 “で”，也可理解为动静态，静态用 “に” 动态用 “で”</p>\n<p>李さんは　図書館　<strong>で</strong>　勉強します。（小李在图书馆学习。）</p>\n<p>机の上   <strong>に</strong>　パンがあります。（桌子上有面包。）</p>\n<h2 id=\"名-か名\"><a class=\"anchor\" href=\"#名-か名\">#</a> 名 か名</h2>\n<p>对若干名词进行选择时，名词和名词之间加 “か”，相当于中文中的 “或者”</p>\n<p>わたしは　毎朝　パン<strong>か</strong>　お粥<strong>を</strong>　食べます。（我每天早上吃面包或者稀饭。）</p>\n<h2 id=\"名-を-くだちい\"><a class=\"anchor\" href=\"#名-を-くだちい\">#</a> 名 を　くだちい</h2>\n<p>常用于花钱购物或白嫖</p>\n<p>コーラと　ケーキ<strong>を　くだちい</strong>。（请给我可乐和蛋糕。）</p>\n<h1 id=\"表达及词语讲解\"><a class=\"anchor\" href=\"#表达及词语讲解\">#</a> 表达及词语讲解</h1>\n<h2 id=\"何的发音-なん和なに\"><a class=\"anchor\" href=\"#何的发音-なん和なに\">#</a> “何” 的发音　‘なん’和‘なに’</h2>\n<p>“何” 相当于汉语 “什么”</p>\n<p>なに　　+　と</p>\n<p>​\t\t\t\t+\t が</p>\n<p>​\t\t\t\t+  \tを</p>\n<p>​\t\t\t\t+ \tで</p>\n<p>なん\t\t+ \tで</p>\n<p>​\t\t\t\t+ \tの</p>\n<p>​\t\t\t\t+    时刻 / 星期</p>\n<h2 id=\"そうですか\"><a class=\"anchor\" href=\"#そうですか\">#</a> そうですか</h2>\n<p>读降调类似汉语的 “是吗”</p>\n<h2 id=\"そうですね\"><a class=\"anchor\" href=\"#そうですね\">#</a> そうですね</h2>\n<p>表示同意对方提议 “ね” 发音不能拉长，否则句意变化</p>\n<h2 id=\"じゃあ\"><a class=\"anchor\" href=\"#じゃあ\">#</a> じゃあ</h2>\n<p>相当于汉语 “那么” 类似于 “我插一句啊” 比较随意，正式场合用 “では”</p>\n<h2 id=\"失礼します\"><a class=\"anchor\" href=\"#失礼します\">#</a> 失礼します</h2>\n<p>意味 “告辞了” 用于向长辈上司道别</p>\n<h2 id=\"いらっしゃいませ-かしこまりました\"><a class=\"anchor\" href=\"#いらっしゃいませ-かしこまりました\">#</a> いらっしゃいませ　 かしこまりました</h2>\n<p>前者意味欢迎光临，省略 “ませ” 语气较为随意可用于家里欢迎朋友做客。后者意味 “明白了” 多用于服务业店员对顾客请求的回复，语气郑重。</p>\n<h2 id=\"すみません\"><a class=\"anchor\" href=\"#すみません\">#</a> すみません</h2>\n<p>除了表示道歉还可以用于找别人搭话，意味 “请问”“劳驾’类似于 “不好意思打扰一下。”</p>\n",
            "tags": [
                "外语",
                "日语",
                "新标日初上",
                "日语"
            ]
        },
        {
            "id": "http://example.com/2023/08/11/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/",
            "url": "http://example.com/2023/08/11/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/",
            "title": "反转链表",
            "date_published": "2023-08-11T15:42:36.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p>给你单链表的头节点  <code>head</code>  ，请你反转链表，并返回反转后的链表。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZXZlcnNlLWxpbmtlZC1saXN0Lw==\">206. 反转链表 - 力扣（LeetCode）</span></p>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<p>可以选择重新再定义一个链表，然后一个个 next。但这样有点浪费空间。</p>\n<h2 id=\"双指针法\"><a class=\"anchor\" href=\"#双指针法\">#</a> 双指针法</h2>\n<p>既然是反转，那么我们只需要把指向全部调转即可。定义两个指针，cur 和 pre，用 cur 指针指向头节点，pre 指针赋值 null，把 cur.next 用 temp 保存，然后 cur.next 指向 pre，然后相互赋值重复逻辑完成反转。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度: O (n)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 空间复杂度: O (1)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>class Solution <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存 cur 的下一个节点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> pre <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            temp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 保存一下 cur 的下一个节点，因为接下来要改变 cur->next</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 翻转操作</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 更新 pre 和 cur 指针</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            cur <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"递归法\"><a class=\"anchor\" href=\"#递归法\">#</a> 递归法</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度: O (n), 要递归处理链表的每个节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 空间复杂度: O (n), 递归调用了 n 层栈空间</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>class Solution <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> pre<span class=\"token punctuation\">,</span>ListNode<span class=\"token operator\">*</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 可以和双指针法的代码进行对比，如下递归的写法，其实就是做了这两步</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// pre = cur;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// cur = temp;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 和双指针法初始化是一样的逻辑</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// ListNode* cur = head;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// ListNode* pre = NULL;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "链表",
                "双指针",
                "链表"
            ]
        },
        {
            "id": "http://example.com/2023/08/11/%E6%89%8B%E5%86%99%E9%93%BE%E8%A1%A8/",
            "url": "http://example.com/2023/08/11/%E6%89%8B%E5%86%99%E9%93%BE%E8%A1%A8/",
            "title": "手写链表",
            "date_published": "2023-08-11T15:28:15.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p>你可以选择使用单链表或者双链表，设计并实现自己的链表。</p>\n<p>单链表中的节点应该具备两个属性： <code>val</code>  和  <code>next</code>  。 <code>val</code>  是当前节点的值， <code>next</code>  是指向下一个节点的指针 / 引用。</p>\n<p>如果是双向链表，则还需要属性  <code>prev</code>  以指示链表中的上一个节点。假设链表中的所有节点下标从 <strong>0</strong> 开始。</p>\n<p>实现  <code>MyLinkedList</code>  类：</p>\n<ul>\n<li><code>MyLinkedList()</code>  初始化  <code>MyLinkedList</code>  对象。</li>\n<li><code>int get(int index)</code>  获取链表中下标为  <code>index</code>  的节点的值。如果下标无效，则返回  <code>-1</code>  。</li>\n<li><code>void addAtHead(int val)</code>  将一个值为  <code>val</code>  的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</li>\n<li><code>void addAtTail(int val)</code>  将一个值为  <code>val</code>  的节点追加到链表中作为链表的最后一个元素。</li>\n<li><code>void addAtIndex(int index, int val)</code>  将一个值为  <code>val</code>  的节点插入到链表中下标为  <code>index</code>  的节点之前。如果  <code>index</code>  等于链表的长度，那么该节点会被追加到链表的末尾。如果  <code>index</code>  比长度更大，该节点将 <strong>不会插入</strong> 到链表中。</li>\n<li><code>void deleteAtIndex(int index)</code>  如果下标有效，则删除链表中下标为  <code>index</code>  的节点。</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZXNpZ24tbGlua2VkLWxpc3Qv\">707. 设计链表 - 力扣（LeetCode）</span></p>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>class MyLinkedList <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义链表节点结构体</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkedNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 初始化链表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">MyLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        _dummyHead <span class=\"token operator\">=</span> new <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里定义的头结点 是一个虚拟头结点，而不是真正的链表头结点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        _size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 获取到第 index 个节点数值，如果 index 是非法数值直接返回 - 1， 注意 index 是从 0 开始的，第 0 个节点就是头结点</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>_size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果 --index 就会陷入死循环</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> cur<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 在链表最前面插入一个节点，插入完成后，新插入的节点为链表的新的头结点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addAtHead</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> new <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        newNode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> _dummyHead<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        _dummyHead<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        _size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 在链表最后面添加一个节点</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addAtTail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> new <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        _size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 在第 index 个节点之前插入一个新节点，例如 index 为 0，那么新插入的节点为链表的新头节点。</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// 如果 index 等于链表的长度，则说明是新插入的节点为链表的尾结点</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 如果 index 大于链表的长度，则返回空</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 如果 index 小于 0，则在头部插入节点</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> _size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> newNode <span class=\"token operator\">=</span> new <span class=\"token function\">LinkedNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        newNode<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        _size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 删除第 index 个节点，如果 index 大于等于链表的长度，直接 return，注意 index 是从 0 开始的</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">deleteAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> _size <span class=\"token operator\">||</span> index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur <span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        delete tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\">//delete 命令指示释放了 tmp 指针原本所指的那部分内存，</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">// 被 delete 后的指针 tmp 的值（地址）并非就是 NULL，而是随机值。也就是被 delete 后，</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\">// 如果不再加上一句 tmp=nullptr,tmp 会成为乱指的野指针</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// 如果之后的程序不小心使用了 tmp，会指向难以预想的内存空间</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        tmp<span class=\"token operator\">=</span>nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        _size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token comment\">// 打印链表</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">printLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        LinkedNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> _dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> nullptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>private<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">int</span> _size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    LinkedNode<span class=\"token operator\">*</span> _dummyHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "链表",
                "链表"
            ]
        },
        {
            "id": "http://example.com/2023/08/11/%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/",
            "url": "http://example.com/2023/08/11/%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/",
            "title": "移除链表元素",
            "date_published": "2023-08-11T15:19:53.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p>给你一个链表的头节点  <code>head</code>  和一个整数  <code>val</code>  ，请你删除链表中所有满足  <code>Node.val == val</code>  的节点，并返回 <strong>新的头节点</strong> 。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZW1vdmUtbGlua2VkLWxpc3QtZWxlbWVudHMv\">203. 移除链表元素 - 力扣（LeetCode）</span></p>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<p>链表的结构已经很清楚了，删除目标元素无非是把指向目标元素的节点 next.next</p>\n<p>注意清理目标元素内存。</p>\n<p>这里要注意的是头节点 head 的删除和替他节点删除的逻辑不一样，需要先判断</p>\n<p>或者设置一个虚拟头节点来进行删除操作。</p>\n<pre><code class=\"language-c++\">//不设虚拟头节点\nclass Solution &#123;\npublic:\n    ListNode* removeElements(ListNode* head, int val) &#123;\n        // 删除头结点\n        while (head != NULL &amp;&amp; head-&gt;val == val) &#123; // 注意这里不是if\n            ListNode* tmp = head;\n            head = head-&gt;next;\n            delete tmp;\n        &#125;\n\n        // 删除非头结点\n        ListNode* cur = head;\n        while (cur != NULL &amp;&amp; cur-&gt;next!= NULL) &#123;\n            if (cur-&gt;next-&gt;val == val) &#123;\n                ListNode* tmp = cur-&gt;next;\n                cur-&gt;next = cur-&gt;next-&gt;next;\n                delete tmp;\n            &#125; else &#123;\n                cur = cur-&gt;next;\n            &#125;\n        &#125;\n        return head;\n    &#125;\n&#125;;\n</code></pre>\n<pre><code class=\"language-c++\">//设虚拟头节点\nclass Solution &#123;\npublic:\n    ListNode* removeElements(ListNode* head, int val) &#123;\n        ListNode* dummyHead = new ListNode(0); // 设置一个虚拟头结点\n        dummyHead-&gt;next = head; // 将虚拟头结点指向head，这样方面后面做删除操作\n        ListNode* cur = dummyHead;\n        while (cur-&gt;next != NULL) &#123;\n            if(cur-&gt;next-&gt;val == val) &#123;\n                ListNode* tmp = cur-&gt;next;\n                cur-&gt;next = cur-&gt;next-&gt;next;\n                delete tmp;\n            &#125; else &#123;\n                cur = cur-&gt;next;\n            &#125;\n        &#125;\n        head = dummyHead-&gt;next;\n        delete dummyHead;\n        return head;\n    &#125;\n&#125;;\n</code></pre>\n",
            "tags": [
                "算法",
                "链表",
                "链表"
            ]
        },
        {
            "id": "http://example.com/2023/08/11/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/",
            "url": "http://example.com/2023/08/11/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/",
            "title": "螺旋矩阵",
            "date_published": "2023-08-11T15:09:04.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p>给你一个正整数  <code>n</code>  ，生成一个包含  <code>1</code>  到  <code>n2</code>  所有元素，且元素按顺时针顺序螺旋排列的  <code>n x n</code>  正方形矩阵  <code>matrix</code>  。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9zcGlyYWwtbWF0cml4LWlpLw==\">59. 螺旋矩阵 II - 力扣（LeetCode）</span></p>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<p>这道题思路很简单，难点在于对边界的处理</p>\n<p>可以选择顺时针画矩阵，从外及里</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>class Solution <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">generateMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用 vector 定义一个二维数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> startx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> starty <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义每循环一个圈的起始位置</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> loop <span class=\"token operator\">=</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每个圈循环几次，例如 n 为奇数 3，那么 loop = 1 只是循环一圈，矩阵中间的值需要单独处理</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 矩阵中间的位置，例如：n 为 3， 中间的位置就是 (1，1)，n 为 5，中间位置为 (2, 2)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用来给矩阵中每一个空格赋值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 需要控制每一条边遍历的长度，每次循环右边界收缩一位</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>loop <span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            i <span class=\"token operator\">=</span> startx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            j <span class=\"token operator\">=</span> starty<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 下面开始的四个 for 就是模拟转了一圈</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 模拟填充上行从左到右 (左闭右开)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> starty<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> offset<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                res<span class=\"token punctuation\">[</span>startx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 模拟填充右列从上到下 (左闭右开)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> startx<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> offset<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 模拟填充下行从右到左 (左闭右开)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> starty<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 模拟填充左列从下到上 (左闭右开)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> startx<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 第二圈开始的时候，起始位置要各自加 1， 例如：第一圈起始位置是 (0, 0)，第二圈起始位置是 (1, 1)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            startx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            starty<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">//offset 控制每一圈里每一条边遍历的长度</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            offset <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 如果 n 为奇数的话，需要单独给矩阵最中间的位置赋值</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            res<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "数组",
                "数组",
                "螺旋矩阵"
            ]
        },
        {
            "id": "http://example.com/2023/08/11/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",
            "url": "http://example.com/2023/08/11/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",
            "title": "滑动窗口",
            "date_published": "2023-08-11T14:21:52.000Z",
            "content_html": "<h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<p>给定一个含有  <code>n</code>  个正整数的数组和一个正整数  <code>target</code>  <strong>。</strong></p>\n<p>找出该数组中满足其和  <code>≥ target</code>  的长度最小的 <strong>连续子数组</strong>  <code>[numsl, numsl+1, ..., numsr-1, numsr]</code>  ，并返回其长度 **。** 如果不存在符合条件的子数组，返回  <code>0</code>  。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9taW5pbXVtLXNpemUtc3ViYXJyYXktc3VtLw==\">209. 长度最小的子数组 - 力扣（LeetCode）</span></p>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<p>先惯例暴力解法，两个 for 循环，第一个 for 遍历数组，第二个 for 找满足条件的数组。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度：O (n^2)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 空间复杂度：O (1)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>class Solution <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">minSubArrayLen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> INT32_MAX<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最终的结果</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子序列的数值之和</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> subLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 子序列的长度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 设置子序列起点为 i</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 设置子序列终止位置为 j</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">>=</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 一旦发现子序列和超过了 s，更新 result</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    subLength <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取子序列的长度</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    result <span class=\"token operator\">=</span> result <span class=\"token operator\">&lt;</span> subLength <span class=\"token operator\">?</span> result <span class=\"token operator\">:</span> subLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 因为我们是找符合条件最短的子序列，所以一旦符合条件就 break</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 如果 result 没有被赋值的话，就返回 0，说明没有符合条件的子序列</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> result <span class=\"token operator\">==</span> INT32_MAX <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>滑动窗口</p>\n<p>滑动窗口是一种数据处理技术，用于处理数据序列或数据流。它的基本原理是在数据序列上定义一个固定大小的窗口，然后通过滑动窗口的方式在序列上移动，以便对窗口内的数据进行处理和分析。</p>\n<p>滑动窗口通常有两个参数：窗口大小和滑动步长。</p>\n<ol>\n<li>窗口大小：窗口大小指定了在数据序列中包含的元素数量。例如，如果窗口大小为 5，则每个窗口将包含 5 个连续的元素。</li>\n<li>滑动步长：滑动步长指定了窗口在数据序列中滑动的距离。例如，如果滑动步长为 1，则每次窗口将向右滑动一个元素。</li>\n</ol>\n<p>上面暴力解法两个 for，一个确定数组的起点，另一个确定目标数组的终点。</p>\n<p>如果用一个 for 的话，可以选择来做终点。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 时间复杂度：O (n)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 空间复杂度：O (1)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>class Solution <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">minSubArrayLen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> INT32_MAX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 滑动窗口数值之和</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 滑动窗口起始位置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> subLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 滑动窗口的长度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 注意这里使用 while，每次更新 i（起始位置），并不断比较子序列是否符合条件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">>=</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                subLength <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取子序列的长度</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                result <span class=\"token operator\">=</span> result <span class=\"token operator\">&lt;</span> subLength <span class=\"token operator\">?</span> result <span class=\"token operator\">:</span> subLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                sum <span class=\"token operator\">-=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里体现出滑动窗口的精髓之处，不断变更 i（子序列的起始位置）</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 如果 result 没有被赋值的话，就返回 0，说明没有符合条件的子序列</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> result <span class=\"token operator\">==</span> INT32_MAX <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>滑动窗口是一种常用的数据处理技术，适用于以下情况：</p>\n<ol>\n<li>时序数据处理：滑动窗口常用于处理时序数据，例如时间序列分析、股票价格预测等。通过滑动窗口，可以在不断更新的数据流中获取固定大小的窗口，进行数据分析和预测。</li>\n<li>数据流处理：当数据以流的形式不断产生时，滑动窗口可以用来对数据流进行实时处理。通过滑动窗口，可以对数据流进行分段处理，提取特征、计算统计量等。</li>\n<li>网络通信：在网络通信中，滑动窗口协议常用于可靠传输和流量控制。发送方将数据分割成固定大小的窗口，接收方确认接收到的窗口并请求下一个窗口，以保证数据的可靠传输和流量控制。</li>\n<li>数据处理和分析：滑动窗口可以用于对大规模数据集进行处理和分析。通过滑动窗口，可以将数据集分成多个窗口，对每个窗口进行分析，以提取特征、计算统计量等。</li>\n</ol>\n<p>需要注意的是，滑动窗口的使用条件取决于具体的应用场景和需求。在使用滑动窗口时，需要根据实际情况确定窗口的大小、滑动的步长等参数，以满足数据处理和分析的要求。</p>\n",
            "tags": [
                "算法",
                "数组",
                "数组",
                "滑动窗口"
            ]
        },
        {
            "id": "http://example.com/2023/08/11/%E7%AC%AC%E5%85%AD%E8%AF%BE-%E5%90%89%E7%94%B0%E5%85%88%E7%94%9F%E4%B8%8B%E4%B8%AA%E6%9C%88%E5%8E%BB%E4%B8%AD%E5%9B%BD/",
            "url": "http://example.com/2023/08/11/%E7%AC%AC%E5%85%AD%E8%AF%BE-%E5%90%89%E7%94%B0%E5%85%88%E7%94%9F%E4%B8%8B%E4%B8%AA%E6%9C%88%E5%8E%BB%E4%B8%AD%E5%9B%BD/",
            "title": "第六课 吉田先生下个月去中国",
            "date_published": "2023-08-11T09:34:03.000Z",
            "content_html": "<h1 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h1>\n<h2 id=\"名词场所へ-动词\"><a class=\"anchor\" href=\"#名词场所へ-动词\">#</a> 名词【场所】へ 动词</h2>\n<p>使用 行きます、帰ります等表示移动的动词时，移动的目的地用助词 へ表示，‘へ’　读作‘え’</p>\n<p>森さんは　日本　へ　帰ります。（森先生回日本了。）</p>\n<h2 id=\"名词场所-から-动词\"><a class=\"anchor\" href=\"#名词场所-から-动词\">#</a> 名词【场所】 から 动词</h2>\n<p>使用移动动词时，移动的起点用助词 “から” 表示</p>\n<p>李さんは　先月　北京　から　来ました。（小李上个月从北京来）</p>\n<h2 id=\"名人と-动\"><a class=\"anchor\" href=\"#名人と-动\">#</a> 名【人】と 动</h2>\n<p>共同做某事的对象用助词 “と” 表示</p>\n<p>李さんは　だれ　と　日本へ　来ましたか。（小李和谁一块儿来的日本？)</p>\n<h2 id=\"名交通工具で-动\"><a class=\"anchor\" href=\"#名交通工具で-动\">#</a> 名【交通工具】で 动</h2>\n<p>交通手段用助词 “で” 表示，不使用交通工具儿步行时用 “歩いて”。</p>\n<p>上海まで　飛行機<strong>で</strong>　　いきます。（到上海坐飞机去。）</p>\n<h2 id=\"名场所から-名场所まで-动\"><a class=\"anchor\" href=\"#名场所から-名场所まで-动\">#</a> 名【场所】から 名【场所】まで  动</h2>\n<p>表示移动的范围时，起点用 “から” 终点用 “まで”</p>\n<p>森さんは　東京　から　広島　まで　新幹線で　行きます。（森先生从东京乘新干线去广岛。）</p>\n<h1 id=\"表达及词语\"><a class=\"anchor\" href=\"#表达及词语\">#</a> 表达及词语</h1>\n<h2 id=\"たしか~\"><a class=\"anchor\" href=\"#たしか~\">#</a> たしか～</h2>\n<p>和中文里的 “好像。。” 类似，不确定内容</p>\n<p>あの人は　だれですか。（那个人是谁？）</p>\n<p>たしか　李さんの　会社の　ひとです。（我记得好像是小李公司的人。）</p>\n<h2 id=\"家和うち\"><a class=\"anchor\" href=\"#家和うち\">#</a> “家” 和 “うち”</h2>\n<p>前者着重于房子，后者着重于家人</p>\n<p>注：如果要表示 “我家” 的意思，“うち” 可以直接表示，“家” 要变成 “私の家”</p>\n<p>##　まつすく ，  帰りました</p>\n<p>前者本身有 “笔直” 的意思，两者连在一起就是 “直接回家”</p>\n<h2 id=\"これ\"><a class=\"anchor\" href=\"#これ\">#</a> これ</h2>\n<p>これ除了指眼前的事物的意思外，还可以指代上文抽象的事</p>\n<p>毎日　夜　11 時まで　働きます。　（每天我工作到夜里 11 点。）</p>\n<p>これは　大変ですね。（那你可真不容易。）</p>\n<h2 id=\"お疲れ様でした寒暄语\"><a class=\"anchor\" href=\"#お疲れ様でした寒暄语\">#</a> お疲れ様でした寒暄语</h2>\n<p>工作完，对方说 “お先に失礼します。” 我先走了，告辞了</p>\n<p>你说 “お疲れ様でした” 意思是辛苦了</p>\n",
            "tags": [
                "外语",
                "日语",
                "新标日初上",
                "日语"
            ]
        },
        {
            "id": "http://example.com/2023/08/11/%E7%AC%AC%E4%BA%94%E8%AF%BE-%E6%A3%AE%E5%85%88%E7%94%9F7%E7%82%B9%E8%B5%B7%E5%BA%8A/",
            "url": "http://example.com/2023/08/11/%E7%AC%AC%E4%BA%94%E8%AF%BE-%E6%A3%AE%E5%85%88%E7%94%9F7%E7%82%B9%E8%B5%B7%E5%BA%8A/",
            "title": "第五课 森先生7点起床",
            "date_published": "2023-08-11T08:29:09.000Z",
            "content_html": "<h1 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h1>\n<h2 id=\"时态\"><a class=\"anchor\" href=\"#时态\">#</a> 时态</h2>\n<p>现在、将来时态  ～ます　否定形式 ～ません</p>\n<p>过去时态 ～ました \t否定形式\t～ませんでした</p>\n<p>田中さんは　明日　休み　ます。（田中先生明天休息。）</p>\n<p>森さんは　先週　休み　ました。（森先生上周休息。）</p>\n<p><strong>注</strong>：疑问句句尾加 “か”</p>\n<h2 id=\"名时间に-动词\"><a class=\"anchor\" href=\"#名时间に-动词\">#</a> 名【时间】に　动词</h2>\n<p>表示动作发生的时间时，要在具体时间词语后加助词 “に”</p>\n<p>今、昨日、今日、明日、每日、去年、来年  不需要加に</p>\n<p>月曜日 --- 日曜日\t\t一般加に、根据情况也可不加</p>\n<p>森さんは　七時　<strong>に</strong>　起きます。（森先生 7 点起床。）</p>\n<h2 id=\"名时间から-名时间まで-动词\"><a class=\"anchor\" href=\"#名时间から-名时间まで-动词\">#</a> 名【时间】から 名【时间】まで  动词</h2>\n<p>表示某动作发生在某个时期时，用  ～から　～まで</p>\n<p>わたしは　9 時　<strong>から</strong>　5 時　<strong>まで</strong>　　働きます。（我 9 点到 5 点工作）</p>\n<p>～から　～まで也可单独使用</p>\n<p>私は　夜中の 2 時まで　勉強しました。（我学习到夜里 2 点）</p>\n<h2 id=\"いつ动词ますか\"><a class=\"anchor\" href=\"#いつ动词ますか\">#</a> いつ动词ますか</h2>\n<p>询问什么时候做某事</p>\n<p>常见词：何時に、何曜日に、何日に</p>\n<p>試験は　いつ　始まりますか。（什么时候开始考试？）</p>\n<p><strong>注</strong>：询问持续性动作或事态的起点或终点时，用 “いつから” 或 “何曜日まで”</p>\n<h2 id=\"は对比\"><a class=\"anchor\" href=\"#は对比\">#</a> は对比</h2>\n<p>“は” 除了提示主题还可以表示对比，此时 “は” 发音略重一些。</p>\n<h1 id=\"表达及词语讲解\"><a class=\"anchor\" href=\"#表达及词语讲解\">#</a> 表达及词语讲解</h1>\n<h2 id=\"人称\"><a class=\"anchor\" href=\"#人称\">#</a> 人称</h2>\n<p>公司称呼上司一般直接称呼其职位，如 “課長” 也可名字加职位如” 吉田課長 “</p>\n<p>谈及别的公司领导要　名字 + 职位 + さん 如” 田中課長さん “或者” 課長さん “表示敬意</p>\n<h2 id=\"~です的用法\"><a class=\"anchor\" href=\"#~です的用法\">#</a> ～です的用法</h2>\n<p>回答问题时，已经明确的内容不需要重复，简单表达为”～です “</p>\n<p>如汉语里别人问你几点起床？简单回答 8 点です</p>\n<h2 id=\"毎朝-何時に-起きますか\"><a class=\"anchor\" href=\"#毎朝-何時に-起きますか\">#</a> 毎朝　何時に　起きますか</h2>\n<p>名词 A + 名词 B　如果两个名词都是时间时 如果 A “毎”　则不可以加の 如果不是则可以加也可不加</p>\n<h2 id=\"~ごる\"><a class=\"anchor\" href=\"#~ごる\">#</a> ～ごる</h2>\n<p>“ごる” 接在表示时间的词后，表示左右</p>\n<p>昨日　十二時半<strong>ごる</strong>　寝ました。（昨天，12 点半左右睡觉）</p>\n<p><strong>注</strong>：“ごる” 后一般不加 “に”</p>\n",
            "tags": [
                "外语",
                "日语",
                "新标日初上",
                "日语"
            ]
        }
    ]
}